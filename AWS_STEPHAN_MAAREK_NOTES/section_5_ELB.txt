 █████╗ ██╗    ██╗███████╗    ███████╗ ██████╗ ██╗     ██╗   ██╗████████╗██╗ ██████╗ ███╗   ██╗███████╗     █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗
██╔══██╗██║    ██║██╔════╝    ██╔════╝██╔═══██╗██║     ██║   ██║╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝    ██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝
███████║██║ █╗ ██║███████╗    ███████╗██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██╔██╗ ██║███████╗    ███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║   
██╔══██║██║███╗██║╚════██║    ╚════██║██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██║╚██╗██║╚════██║    ██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║   
██║  ██║╚███╔███╔╝███████║    ███████║╚██████╔╝███████╗╚██████╔╝   ██║   ██║╚██████╔╝██║ ╚████║███████║    ██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║   
╚═╝  ╚═╝ ╚══╝╚══╝ ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝    ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝   
                  

------------------------------------------
   Amazon ELB - Elastic LOAD Balancer
------------------------------------------

scalability and availability 

Scalability is of 2 types 

    - Vertical 
    - Horizontal 

Vertical Scalability:

- Vertically scalability means increasing the size of the instance 
- For example, your application runs on a t2.micro 
- Scaling that application large means running it on a t2.large instance 
- Vertical scalability is very common for non distributed systems, such as a database 
- RDS,Elastic cache are services that can scale vertically. 
- There's usually a limit to how much you can vertically scale. 

Horizontal Scalability: 

- Horizontal scalability means increasing the number of instances / systems for 
your application 
- Horizontal scaling implies distributed systems. 
- This is very common for web applications / modern applications 
- Its easy to horizontally scale thanks to cloud offerings such as ec2. 

High availability: 

- High Availability usually goes hand in hand with horizontal scaling 
- High availability means running your application / system in at least 2 data centres (== Availability Zones)
- The goal of high availability is to survive a data center loss 
- The high availability can be passive for RDS Multi-AZ for example | Active in case both are working and passive in which 1 will work if one goes offline 

Summary 

    - Vertical scaling - from t2.nano to i2tb.metal
    - horizontal scaling - Increasing number of scaling group, adding load balancer 
    - High Availability - Auto scaling Group Multi-AZ, Load Balancer Multi-AZ 

---------------------------------------------
   What is Amazon's Elastic Load Balancer? 
---------------------------------------------

Load Balancers are servers that forward traffic to multiple servers (Eg. Ec2 instances) downstream

Why to use a Load Balancer: 

- Spread load across multiple downstream instances 
- Expose a single point of access to your Application 
- Seamlessly handle failures of downstream instances 
- Do regular health checks to your instances 
- Provide SSL termination (HTTPS) for your websites 
- Enforce stickiness with cookies 
- High Availability across Zones 
- Separate public traffic from private traffic 

An elastic load balancer is a Managed Load Balancer 
    - AWS guarantees that it will be working 
    - AWS takes care of upgrades, maintenance and high availability 
    - AWS provides only a few configuration knobs 

It costs less to setup your own load balancer but it will be a lot more effort on 
your end 

It is integrated with many AWS offerings / services 

- Ec2, Ec2 Auto Scaling Groups, Amazon ECS 
- AWS Certificate Manager (ACM), Cloud Watch 
- Route 53, AWS, WAF, AWS Global Accelerator

Health Checks 

- Verify if EC2 Works properly.
- They enable the load balancers to know if instances are available incase of higher traffics. They also enable it 
to check on replies of ec2 instances for network requests on the same. 
- The health check of the instance availability is done on a port and on a route. 
- If the response is not 200, then the traffic will not be forwarded to that instance. 

Types of Load balancers 
- AWS has 4 kinds of Managed Load Balancers 
- Classic Load Balancer (v1 - old generation) - 2009 - CLB 
    - HTTP, HTTPS, TCP, SSL 
- Application Load Balancer 
    - HTTPS, HTTP, WebSocket 
- Network load Balancer 
    - TCP, TLS (Secure TCP), UDP 
- Gateway Load Balancer 
    - Operates at layer 3(Network layer) - IP Protocol 

- Overall, It is recommended to use the newer generation load balancers as they provide more features 
- Some load balancers can be setup as internal (private) or external (public) ELB

Load Balancer Security Groups 


- Users at client side could connect to the application load balancer via HTTP, HTTPS traffic 
- However from load balancer the connection will be private and secure and the inbound traffic will only be from Load Balancer IP 
- The Load Balancer Security group will usually have a port range from 80 to 443 and has source of 0.0.0.0/0

---------------------------------------------
   What is Application Load Balancer? 
---------------------------------------------

- Application Load Balancer is Layer 7 
- Load balancing to multiple HTTP applications across machines - (Target groups)
- Load Balancing to multiple applications on the same machine - ex-containers 
- Support for HTTP/2 and websocket 
- Support redirects - from HTTP to HTTPS for example 

- Routing Tables 
    - Routing is based on path in URL 
    - Routing is based on hostname in URL 
    - Routing is based on Query Strings, Headers 

- ALB are a great fit fir micro services and container-based application
- Has a port mapping feature to redirect to dynamic post in ECS 
- In Comparison we need multiple classic load balancer per application

Where are the target groups... 

- EC2 instances - Managed by an Autoscaling group  - HTTP 
- ECS Tasks managed by ECS itself  - HTTP 
- Lambda functions - HTTPS requests is translated into a JSON event 
- IP Addresses

---------------------------------------------
        Network Load Balancer 
---------------------------------------------

- It forwards TCP and UDP traffic to your instances 
- It could handle millions of requests per seconds 
- Less latency ~100 ms compared to application load balancer. 

Network load balancer has only one static IP per availability zone and 
it supports assigning Elastic IP - helpful for whitelisting specific IP 

Network Load Balancers are used for Extreme performance, TCP or UDP traffic 
Its not included in AWS free tier


- Ec2 Instances 
- IP Addresses - must be Private IPs 
- Application Load Balancer 
- Health Check Support the TCP, HTTP and HTTPS Protocols

---------------------------------------------
        Gateway Load Balancer 
---------------------------------------------

Deploy, Scale and Manage a fleet of 3rd Party network virtual appliances 
in AWS 

Gateway traffic acts as a gateway watch men on your traffic and 3rd part application requests 
It checks if the request is legit by sending it to a gateway analyser. If the traffic is not 
healthy, then is dropped. Else the traffic is routed to application Ec2 instance all the way to the end. 

Gateway load balancer operates on layer 3 which is the network layer - IP 

It combines the following functions 
    - Transparent Network Gateway - Single entry / Exit for all the traffic 
    - Load Balancer - Distributes your traffic to your virtual appliances 

Uses the GENEVE Protocol for port 6081

For a Gateway Load Balancer the target group should be Ec2 Instance 

---------------------------------------------
              Sticky Sessions  
---------------------------------------------

Routing a user to a same instance brings about stickiness 

- It is possible to implement stickiness so that the same client is always redirected to the same Instance
behind the load balancer. 
- This works for Classic Load Balancer, Application Load Balancer and Network Load Balancer. 
- The "Cookie" used for stickiness has an expiration date you control
- Use case: Make sure the user does't lose his session data 
- Enabling Stickiness may bring imbalance to the load over the backend Ec2 instances 

There are 2 cookies 

Application Based Cookies 

- Custom Cookie 
    - Generated by the target 
    - Can include any custom attributes required by the application
    - Cookie name must be specified individually for each target group 
    - Don't use AWSALB, AWSALBAPP, or AWSALBTG reserved for use by the 

- Application Cookie 
    - Generated by the load balancer 
    - Cookie name is AWSALBAPP 

Duration-Based Cookies
    - Cookie generated by the load balancer 
    - Cookie name is AWSALB for ALB, AWSELB for CLB 
 
---------------------------------------------
        Cross Zone Load Balancing
----------------------------------------------


With Cross Zone Load Balancing

    - Each Load Balancer instance distributes evenly across all registered instances in all AZ 

With Cross Zone Load Balancing 

    - Requests are distributed in the instances of the node of the elastic load balancer 


Application Load Balancer 

- Enabled by Default (can be disabled at the target group level)
- No Charges for inter AZ data 

Network Load Balancer and Gateway Load Balancer 

- Disabled by Default 
- You pay charges for inter AZ data if enabled 

Classic Load Balancer

- Disabled by Default 
- No charges for inter AZ data if enabled

---------------------------------------------
              SSL Certificates
----------------------------------------------

- An SSL Certificate allows traffic between your clients and your load balancer 
to be encrypted in transit (in-flight encryption)

- SSL refers to secure sockets layer used to encrypt connections 
- TLS refers to Transport Layer Security, which is a newer version 
- Nowadays, TLS certificates are mainly used, but people stiff refer as SSL 

- Public SSL certificates are issued by Certificate Authorities 
- Comodo, Symatec, Go Daddy and GlobalSign and Digicert , Letsencrypt etc 

- SSL Certificates have an expiration date and must be renewed.


During Load Balancing 
- It loads the X.509 certificate (SSL/TLS server certificate)
- You can Manage certificates using ACM (AWS Certificate Manager)
- You can create / upload your own certificates alternatively
- HTTPS Listener: 
    - You must specify a default certificate 
    - You can add an optional list of certs to support multiple domains 
    - clients can use SNI to specify the host name they reach 
    - Ability to specify policy to support older versions of SSL / TLS legacy clients

SNI - Server Name Indication 

- SNI Solves the problem of loading multiple SSL certificates on to one web server 
- Its a newer protocol and requires the client to indicate the host name of the target server
in the initial SSL handshake

- Only works for ALB and NLB and CloudFront
- Does not works for CLB 

ELB with SSL 

- Classic Load Balancer 
    - only 1 certificate 
- ALB could support multiple certificates and uses SNI 
- NLB supports multiple listeners with multiple SSL certificates

---------------------------------------------
             Connection Draining
----------------------------------------------

Feature Naming 

Delaying connection to process all requests so there is a completion of requests

    - Connection Draining  - for CLB 
    - De-registration Delay - for ALB and NLB 

- Time to complete "in-flight requests" while the instance is de-registering or unhealthy 
- Stops sending new requests to the ec2 instance which is de-registering
- You could delay the requests from 1 to 3600 seconds, where default is 300 seconds. 
- Setting it to low value, if your requests are short 
- It could be disabled say 0 


